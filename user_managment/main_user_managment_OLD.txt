# import discord
# from discord.ext import commands
# import datetime
# from discord.utils import get
#
# import sqlite3
# import os
# from threading import Thread
# import asyncio
# import random
#
# class user_managment(commands.Cog):
#     def __init__(self,client):
#         self.client = client
#         self.color = 0x1D474C
#         self.logchannel = 833101856686735361
#         self.forembedwarndbcreate()
#     # here add a async function that is run from main.py file to check which users are warned
#
#     # @commands.Cog.listener()
#     # async def on_ready(self):
#     #     # warndbcreate()
#     #     print("sdak")
#     #     warned_users_id = []
#     #     warningrole = get(self.guild.roles, name="WARNING")
#     #     for member in self.guild.members:
#     #         for role in member.roles:
#     #             if role.name == "WARNING":
#     #                 warned_users_id.append(member.id)
#
#     @commands.command()
#     @commands.has_permissions(manage_messages=True)
#     async def prune(self, ctx, amount=1):
#         await ctx.channel.purge(limit=amount+1)
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def ban(self,ctx, member: discord.User = None,*, reason = None):
#         channel = self.client.get_channel(self.logchannel)
#         if member == None or member == ctx.message.author:
#             await ctx.channel.send("You cannot ban yourself")
#             return
#         if reason == None:
#             reason = "Breaking server/discord rules!"
#         type = "banned"
#         role = get(member.guild.roles, name="MUTE")
#         await member.add_roles(role)
#         try:
#             scrLink = ctx.message.attachments[0].url
#             await logMessage(ctx, type, member,reason,channel, scrLink)
#         except:
#             await logMessage(ctx, type, member,reason,channel, None)
#         await member.send(f"You have been banned from {ctx.guild.name} for: {reason}")
#         await ctx.guild.ban(member, reason=reason)
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def ub(self, ctx, unbannedUserID: int):
#         # if reason == None:
#         #     reason = "Not specified!"
#         user = await self.client.fetch_user(unbannedUserID)
#         channel = self.client.get_channel(self.logchannel)
#         await channel.send(f"{user} with ID ({unbannedUserID}) has been unbanned!")
#         await ctx.guild.unban(user)
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def mute(self, ctx, member: discord.User = None, *, reason=None):
#         channel = self.client.get_channel(self.logchannel)
#         if member == None or member == ctx.message.author:
#             await ctx.channel.send("You cannot mute yourself")
#             return
#         if reason == None:
#             reason = "Breaking server/discord rules!"
#         type = "muted"
#         try:
#             scrLink = ctx.message.attachments[0].url
#             await logMessage(ctx, type, member, reason, channel, scrLink)
#         except:
#             await logMessage(ctx, type, member, reason, channel, None)
#         role = get(member.guild.roles, name="MUTE")
#         await member.add_roles(role)
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def sban(self, ctx, member: discord.User = None, *, reason=None):
#         channel = self.client.get_channel(self.logchannel)
#         if member == None or member == ctx.message.author:
#             await ctx.channel.send("You cannot soft Ban yourself")
#             return
#         if reason == None:
#             reason = "Breaking server/discord rules!"
#         type = "soft banned"
#         role = get(member.guild.roles, name="MUTE")
#         await member.add_roles(role)
#         try:
#             scrLink = ctx.message.attachments[0].url
#             await logMessage(ctx, None, member, reason, channel, scrLink)
#         except:
#             await logMessage(ctx, None, member, reason, channel, None)
#         await ctx.guild.ban(member, reason=reason)
#         await ctx.guild.unban(member)
#
#     # CODE BELOW IS TO MAKE TEMP MUTE
#
#     # @commands.command()
#     # @commands.has_permissions(ban_members=True)
#     # async def tmute(self, ctx, member: discord.User = None, reason = None):
#     #     channel = self.client.get_channel(self.logchannel)
#     #     if member == None or member == ctx.message.author:
#     #         await ctx.channel.send("You cannot mute yourself")
#     #         return
#     #     if reason == None:
#     #         reason = "Breaking server/discord rules!"
#     #     type = "muted"
#     #     try:
#     #         scrLink = ctx.message.attachments[0].url
#     #         await logMessage(ctx, type, member, reason, channel, scrLink)
#     #     except:
#     #         await logMessage(ctx, type, member, reason, channel, None)
#     #     role = get(member.guild.roles, name="MUTE")
#     #     await member.add_roles(role)
#     #     Thread(target=self.between, args=(reason, member)).start()
#     #     # await asyncio.sleep(int(reason)*3600)
#     #     await self.sleepyfunction(reason)
#     #     await member.remove_roles(role)
#     #     await channel.send("User has been unmuted")
#     #
#     # async def sleepyfunction(self,mutTime):
#     #     channel = self.client.get_channel(self.logchannel)
#     #     muteTime = int(mutTime) * 3600
#     #     z = await channel.send(random.randint(1,999999))
#     #     while muteTime >= 0:
#     #         muteTime -= 240
#     #         await z.edit(random.randint(1,999999))
#     #         await asyncio.sleep(240)
#     #     await z.delete()
#     #
#     # async def waiting(self, mutTime, member):
#     #     # channel = self.client.get_channel(833747203490709604)  # commands channel on test server
#     #     muteTime = int(mutTime) * 3600
#     #     # role = get(member.guild.roles, name="MUTE")
#     #     while muteTime >= 0:
#     #         muteTime -= 240
#     #         await asyncio.sleep(240)
#     #     # await member.remove_roles(role)
#     #     # await channel.send("User ha been unmuted")
#     #
#     # def between(self, muteTime, member):
#     #     loop = asyncio.new_event_loop()
#     #     asyncio.set_event_loop(loop)
#     #     loop.run_until_complete(self.waiting(muteTime, member))
#     #     loop.close()
#
#     # CODE ABOVE IS TO MAKING A TEMP MUTE
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def warn(self,ctx, member: discord.User = None,*, reason = None):
#         if member == None or member == ctx.message.author:
#             await ctx.channel.send("You cannot warn yourself")
#             return
#         if reason == None:
#             reason = "Breaking server/discord rules!"
#
#         try:
#             scrLink = ctx.message.attachments[0].url
#             self.warnedbforEmbed(member, reason, scrLink)
#             await self.warndbinsert(ctx,member, reason, scrLink)
#             # await logMessage(ctx, type, member, reason, channel, scrLink)
#         except:
#             self.warnedbforEmbed(member, reason, '')
#             await self.warndbinsert(ctx,member, reason, '')
#             # await logMessage(ctx, type, member, reason, channel, None)
#
#     @commands.command()
#     @commands.has_permissions(ban_members=True)
#     async def warned(self,ctx):
#         channel = self.client.get_channel(self.logchannel)
#         conn = sqlite3.connect('user_managment/forembed.db')
#         c = conn.cursor()
#         rows = c.execute("SELECT * FROM warned_users").fetchall()
#         conn.commit()
#         conn.close()
#         e = discord.Embed(
#             title="EVERY WARNED USERS",
#             description="",
#             color=0x1D474C
#         )
#         for x in range(len(rows)):
#             if len(e) >= 1024:
#                 await channel.send(embed=e)
#                 e = discord.Embed(
#                     title="",
#                     description="",
#                     color=0x1D474C
#                 )
#             e.add_field(name=f'ID: {rows[x-1][1]} \nWHO: {rows[x-1][2]} \nWHEN: {rows[x-1][4]}',
#                         value=f'**REASON:** \n{rows[x-1][3]}', inline=False)
#         await channel.send(embed=e)
#         print(len(e))
#
#     # function to be able to show overall warnings
#     def warnedbforEmbed(self,member,reason,scrLink):
#         reason += "\n" + scrLink
#         personid = int(member.id)
#         conn = sqlite3.connect('user_managment/forembed.db')
#         c = conn.cursor()
#         c.execute("INSERT INTO 'warned_users' ('id', 'person_id', 'person_tag', 'reason', 'warndate') VALUES (NULL,?,?,?,?)",
#                   (personid,
#                    str(member),
#                    reason,
#                    datetime.datetime.utcnow(),
#                    ))
#         conn.commit()
#         conn.close()
#
#     async def warndbinsert(self,ctx,member,reason,scrLink):
#         reason += "\n" + scrLink
#         channel = self.client.get_channel(self.logchannel)
#         warnRole = get(member.guild.roles, name="WARNING")
#         indangerRole = get(member.guild.roles, name="In danger of ban")
#         mute = get(member.guild.roles, name="MUTE")
#         if indangerRole in member.roles:
#             type = "banned"
#             reason += '\n **BAN FROM WARNINGS.**'
#             await member.add_roles(mute)
#             await logMessage(ctx, type, member, reason, channel, scrLink)
#             await ctx.guild.ban(member, reason=reason)
#         elif warnRole in member.roles:
#             type = "in danger of banned"
#             await member.add_roles(indangerRole)
#             await logMessage(ctx, type, member, reason, channel, scrLink)
#         else:
#             type = "warned"
#             await logMessage(ctx, type, member, reason, channel, scrLink)
#             await member.add_roles(warnRole)
#         # warneduserid = int(member.id)
#         # conn = sqlite3.connect('user_managment/warned.db')
#         # c = conn.cursor()
#         # # DONE
#         # # check if user is in database if not add him
#         # # if user in database change danger of ban to 1 and add to user corresponding rank
#         # # if user is in danger of ban, ban him
#         #
#         # try:
#         #     rows = c.execute("SELECT * FROM 'warned_users' WHERE person_id=(?)", (warneduserid,)).fetchall()
#         #     print(rows)
#         #     print(len(rows))
#         #     if rows[0] == None:
#         #         pass
#         #     elif len(rows) > 1:
#         #         type = "banned"
#         #         reason += '\n **BAN FROM WARNINGS.**'
#         #         await member.add_roles(role)
#         #         await logMessage(ctx, type, member, reason, channel, scrLink)
#         #         await ctx.guild.ban(member, reason=reason)
#         #     else:
#         #         c.execute(
#         #             "INSERT INTO 'warned_users' ('id', 'person_id', 'person_tag', 'reason', 'danger') VALUES (NULL, ?,?,?,?)",
#         #             (warneduserid,
#         #              str(member),
#         #              reason,
#         #              'in danger of ban',
#         #              ))
#         #         conn.commit()
#         #         type = "in danger of banned"
#         #         await member.add_roles(indangerRole)
#         #         await logMessage(ctx, type, member, reason, channel, scrLink)
#         # except:
#         #     c.execute(
#         #         "INSERT INTO 'warned_users' ('id', 'person_id', 'person_tag', 'reason', 'danger') VALUES (NULL, ?,?,?,?)",
#         #                   (warneduserid,
#         #                    str(member),
#         #                    reason,
#         #                    0,
#         #                    ))
#         #     conn.commit()
#         #     type = "warned"
#         #     await member.add_roles(warnRole)
#         #     await logMessage(ctx, type, member, reason, channel, None)
#         # conn.close()
#         # IN PROGRESS
#         # showing in embed who is warned and why
#         # ability to unwarn:
#             # check what if danger is 1 if it is put it to 0
#             # if user has only warning unwarn him
#
#     # checking if warnedPeople database exist and if it has table in it
#
#     # def tableExists(self):  # checking if table exists
#     #     conn = sqlite3.connect('user_managment/warned.db')
#     #     c = conn.cursor()
#     #     check = c.execute(
#     #         """SELECT count(*) FROM sqlite_master WHERE type='table' AND name='warned_users';"""
#     #     )
#     #     conn.commit()
#     #     conn.close()
#     #     return check
#     #
#     # def warncreatingDB(self):
#     #     if os.path.isfile('user_managment/warned.db'):
#     #         print('Warn Database already exists!')
#     #         return True
#     #     else:
#     #         conn = sqlite3.connect('user_managment/warned.db')
#     #         c = conn.cursor()
#     #         c.execute("""
#     #                     CREATE TABLE warned_users (
#     #                     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     #                     person_id BIGINT,
#     #                     person_tag TEXT,
#     #                     reason TEXT,
#     #                     danger INTEGER);""")
#     #         conn.commit()
#     #         conn.close()
#     #         print("Warn Database and table has been created")
#     #         return False
#     #
#     # def warndbcreate(self):
#     #     self.warncreatingDB()
#     #     conn = sqlite3.connect('user_managment/warned.db')
#     #     c = conn.cursor()
#     #     if not self.tableExists():
#     #         c.execute("""
#     #                     CREATE TABLE warned_users (
#     #                     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     #                     person_id BIGINT,
#     #                     person_tag TEXT,
#     #                     reason TEXT,
#     #                     danger INTEGER);""")
#     #         print('Creating warned_users table')
#     #         conn.commit()
#     #     else:
#     #         print('Warned_users Table already exists, passing...')
#     #         pass
#     #     conn.commit()
#     #     conn.close()
#
#     # end of it here
#     # checking if warnedpeopledb exists and if so then if it has table in it
#     def forembedtableExists(self):  # checking if table exists
#         conn = sqlite3.connect('user_managment/forembed.db')
#         c = conn.cursor()
#         check = c.execute(
#             """SELECT count(*) FROM sqlite_master WHERE type='table' AND name='warned_users';"""
#         )
#         conn.commit()
#         conn.close()
#         return check
#
#     def forembedwarncreatingDB(self):
#         if os.path.isfile('user_managment/forembed.db'):
#             print('Embed Database already exists!')
#             return True
#         else:
#             conn = sqlite3.connect('user_managment/forembed.db')
#             c = conn.cursor()
#             c.execute("""
#                         CREATE TABLE warned_users (
#                         id INTEGER PRIMARY KEY AUTOINCREMENT,
#                         person_id BIGINT,
#                         person_tag TEXT,
#                         reason TEXT,
#                         warndate DATE);""")
#             conn.commit()
#             conn.close()
#             print("Embed Database and table has been created")
#             return False
#
#     def forembedwarndbcreate(self):
#         self.forembedwarncreatingDB()
#         conn = sqlite3.connect('user_managment/forembed.db')
#         c = conn.cursor()
#         if not self.forembedtableExists():
#             c.execute("""
#                         CREATE TABLE warned_users (
#                         id INTEGER PRIMARY KEY AUTOINCREMENT,
#                         person_id BIGINT,
#                         person_tag TEXT,
#                         reason TEXT,
#                         warndate DATE);""")
#             print('Creating warned_users table for embed')
#             conn.commit()
#         else:
#             print('Warned_users Table for embed already exists, passing...')
#             pass
#         conn.commit()
#         conn.close()
#
#     # checking all warned users here
#     # async def whoiswarned(self):
#     #     print("sdak")
#     #     warned_users_id = []
#     #     # warningrole = get(self.guild.roles, name="WARNING")
#     #     # for member in discord.Guild.members:
#     #     print(discord.Guild.members)
#     #     x = get(self.guild.members)
#     #     print(x)
#     #     for guild in self.client.guilds:
#     #         for member in guild.members:
#     #             print(member)
#     #     print(warned_users_id)
#         # for member in self.guild.users:
#         #     for role in member.roles:
#         #         if role.name == "WARNING":
#         #             warned_users_id.append(member.id)
#     # toMention = get(self.guild.roles, name="MUTE")
#
# async def logMessage(ctx, type, member, reason,chan, proof):
#     if type == None:
#         pass
#     else:
#         await member.send(f"You have been {type} from {ctx.guild.name} for: {reason}")
#     e = discord.Embed(
#         title=f"an user has been {type}".upper(),
#         description="",
#         color=0xFF0000
#     )
#     e.add_field(
#         name=f"{type} person discord name and tag.".capitalize(),
#         value=f"{member}", inline=False
#     )
#     e.add_field(
#         name=f"{type} person's ID:".capitalize(),
#         value=f"{member.id}", inline=False
#     )
#     if proof == None:
#         e.add_field(
#             name="Reason:",
#             value=f"{reason}", inline=False
#         )
#         e.timestamp = datetime.datetime.utcnow()
#         e.set_footer(text='\u200b', icon_url="")
#     else:
#         e.add_field(
#             name="Reason:",
#             value=f"{reason}"
#         )
#         e.set_image(url=proof)
#         e.timestamp = datetime.datetime.utcnow()
#         e.set_footer(text='\u200b', icon_url="")
#     await chan.send(embed=e)
#
#
# def setup(client):
#     client.add_cog(user_managment(client))
